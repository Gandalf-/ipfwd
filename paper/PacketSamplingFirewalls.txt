Packet Sampling Firewalls


Outline
* Problem
* Abstract
* Subsampling
* Randomized Subsampling
* Dynamic Subsampling
* Heuristic Based Rules
* IPFW
* Benchmarking Performance
* Results
* Security Implications
* Related Work
* Conclusion
* References


Problem
        Provide non-disruptive backend network monitoring to OneFS at 40Gb speeds.


Abstract
The performance of FreeBSD’s IPFW can be increased to support 40Gb network interfaces without additional specialized hardware through dynamic probabilistic rule matching. The probability of rule matching will be based on current system load, allowing it to adapt to changing demands on the system. The efficacy of packet stream subsampling will also be explored.


Subsampling
        Ideally, all network traffic would be carefully inspected; this is impractical due to the limitations of CPU and bus speeds. When logging, it’s also limited by disk speed. Subsampling traffic provides a way take the temperature of the network and increase chances of detecting abnormal behavior; some monitoring is better than none. To provide full packet inspection to every packet on system, the network links would have to be split into 10Gb links, each passed through dedicated hardware. 
Sampling rates can be tailored to not interfere with other system functions and network throughput. Malicious or abnormal network activity is likely to occur again unless detected and steps are taken to prevent it. The monitoring system could be more aggressive during ‘quiet’ times and increase the sample rate to increase the chances of detecting abnormalities. Likewise, the sample rate could be decreased during network high load scenarios to ensure peak performance of the cluster. These balancing restrictions will determine effectiveness of the system. For instance, suppose the firewall rules provided will detect 70% of anomalous traffic when applied to every packet. By restricting the subsampling system’s CPU usage to 50% of normal as a result of high system load, we can expect the effectiveness of the system to be reduced. This means more false positives and false negatives.


Randomized Subsampling
        Interval packet capture and inspection could more easily be detected by an adversary. By taking random samples, we increase our chances of catching malicious activity, regardless of whether it’s on an interval or randomized basis. Straight interval sampling runs the risk that the interval won’t line up with malicious activity that happens to be on a complementary interval.
        Randomized subsampling will cause some network transactions to look anomalous because they are taken out of context. For example, the sample may not include the TCP handshakes that started the transaction. Deep packet inspection and complex filtering rules cannot be uniformly applied as they can when inspecting every packet. 
False positives are a problem for any intrusion prevention system, and would be more difficult to avoid when subsampling traffic. One solution is to restrict the system to stateless packet inspection rules. Many rules could still be enforced this way, such as: detecting new outgoing and incoming traffic, unusual traffic destinations/ sources, and unauthorized protocols or port usage. For instance, the system doesn’t need to see an entire FTP (port 21/22) transfer to flag the packets if FTP (port 21/22) is disallowed in general. Another approach is to restrict when sampling starts to the logical beginnings of transfers. This requires the system to understand TCP, UDP, and application protocols, which would impose significant additional overhead. However, this would potentially allow normal, full session inspection. This would require the inspection of each packet to determine if it matches the session, and would only be practical during low system load.


Dynamic Subsampling
        Subsampling reduces the effectiveness of firewall rules and other intrusion prevention systems that rely on packet supply. To cope with changing system resource availability, the system should be able to dynamically adjust the rate at which it samples packets to stay within resource constraints and not impact system or network performance.
To allow this kind of dynamic balancing, the system needs a way to efficiently query the kernel for load information. FreeBSD’s libkvm (Kernel Data Access Library) provides an efficient interface to this data, and includes caching mechanisms to increase performance. The modified system has two performance metrics to meet: it must not interfere with other system services’ resource availability through CPU or memory usage and it must not unacceptably reduce the interfaces throughput, ‘wirespeed’. What an unacceptable reduction constitutes is to be determined.


Heuristic Based Rules
        Pattern matching rules are standard across packet monitoring tools. The monitoring system could complete analysis on the fly, or save samples to disk for later analysis. A future improvement would be to model typical network traffic and using that to determine current traffic sample’s deviation from the norm as a predictor of abnormal activity.
As an alternative to local analysis, the system could send network samples to a dedicated Intrusion Prevention System (IPS) for inspection. For this to be effective, sampling windows would have to be protocol aware and start at the beginnings of transactions. This is not practical because each packet would have to be inspected to see if it matches the desires transaction. These cycles could instead be spent on actual rule matching.
Heuristics with higher computational intensity can be applied at longer intervals than simpler heuristics while still gaining their benefit. This offsets the cost of their computation time with the benefit of more fine grained packet analysis. Determining what, if any, actions to take based on detection may be outside the scope of this project.
This type of system could employ signature based and anomaly threat detection, without deep packet inspection. Common preventable network attacks include: ICMP storms, Ping of Death, SSL Evasion, IP fragmentation, and DoS/DDoS. The system can also enforce standard firewall rules as defined by the system’s security policy, such as disallowing outgoing FTP traffic. Policy violations need to be logged in some form, because IPFW using subsampling won’t stop all the traffic.
Otherwise, the system could enforce typical firewall rules such as whitelisting incoming and outgoing traffic destinations as well as port usage restrictions. Policy violations will be flagged and generate events for the cluster to report through existing log reporting systems.


IPFW
        IPFW is native to FreeBSD, supports stateful firewall rules, NAT, and traffic shaping through a kernel firewall rule processor. It has better performance and a comparable feature set to BPF which is why it was selected for this project. 


Benchmarking Performance
        The following parameters were set for consistency between tests: ...


Results
        Before


        After


Security Implications
        Discussion of security implications of packet sampling. Better than nothing, but how much better? False sense of security?


Related Work
        Discuss current systems that use packet sampling


Conclusion
The performance of FreeBSD’s IPFW can be increased to support 40Gb network interfaces without additional specialized hardware through dynamic probabilistic rule matching. The probability of rule matching will be based on current system load, allowing it to adapt to changing demands on the system. Through this, firewall policies can be enforced allowing administrators to detect network anomalies and malicious activity without affecting overall cluster performance.




References
* Packet Capture in 10-Gigabit Ethernet Environments Using Contemporary Commodity Hardware 
   * Fabian Schneider, J¨org Wallerich, and Anja Feldmann
   * https://www.net.t-labs.tu-berlin.de/papers/SWF-PCCH10GEE-07.pdf
* FreeBSD Handbook 29.3 PF
   * https://www.freebsd.org/doc/handbook/firewalls-pf.html 
* FreeBSD Network Tuning
   * https://calomel.org/freebsd_network_tuning.html 
* FreeBSD IPFW Manual
   * https://www.freebsd.org/cgi/man.cgi?ipfw(8) 
* FreeBSD Forwarding Performance
   * https://bsdrp.net/documentation/technical_docs/performance 
   * https://github.com/ocochard/netbenches